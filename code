#include <iostream>
#include <iomanip>
#include <windows.h>
#include <fstream>
#include <vector>
#include <string>
using namespace std;

struct Rec {
	int price{};
	string service;
	struct Master {
		string name{};
		string sername{};
		string patronymic{};
	}master;
	struct Data {
		int day{};
		int month{};
		int year{};
	}data;
	struct Time {
		int hours{};
		int minutes{};
	}time;
	struct Client {
		string name{};
		string sername{};
		string patronymic{};
	}client;
	string clientsNumber;
};

Rec records2;

int correct_value() {
	int n{};
	bool flag{};
	do {
		flag = false;
		if ((cin >> n).fail()) {
			cin.clear();
			cin.ignore(INT_MAX, '\n');
			cout << "Вы ввели некорректное значение,попробуйте снова:" << endl << endl;
			flag = true;
		}
	} while (flag);
	return n;
}

bool isValidDate(int day, int month, int year) {
	if (year < 0 || month < 1 || month > 12 || day < 1) {
		cout << "Вы ввели некорректное значение,попробуйте снова:" << endl;
		return false;
	}
	static const int daysInMonth[] = { 0,31,28,31,30,31,30,31,31,30,31,30,31 };
	if (day > daysInMonth[month]) {
		cout << "Вы ввели некорректное значение,попробуйте снова:" << endl;
		return false;
	}
	if (month == 2 && day == 29 && (year % 4 != 0 || (year % 100 == 0 && year % 400 != 0))) {
		cout << "Вы ввели некорректное значение,попробуйте снова:" << endl;
		return false;
	}
	return true;
}

bool isValidTime(int hours, int minutes) {
	if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
		cout << "Вы ввели некорректное значение,попробуйте снова:" << endl;
		return false;
	}
	return true;
}

void zapolnenie(Rec* (&records), int& size) {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	bool flag = true;
	do {
		flag = true;
		cout << "Введите количество записей, которые вы бы хотели добавить в таблицу:" << endl;
		size = correct_value();
		if ((size >= 1) || cin.fail() || cin.peek() != '\n')
			flag = false;
		else {
			cout << "Вы ввели некорректное значение,попробуйте снова:" << endl;
		}
	} while (flag);
	system("cls");
	records = new Rec[size];
	for (int i = 0; i < size; i++) {
		cin.ignore();
		cin.clear();
		cout << "Введите услугу № " << i + 1 << " :" << endl;
		cin >> records[i].service;
		system("cls");

		cin.ignore();
		cin.clear();
		cout << "Введите цену:" << endl;
		records[i].price = correct_value();
		system("cls");

		cin.ignore();
		cin.clear();
		cout << "Введите ФИО мастера:" << endl;
		cin >> records[i].master.name;
		cin.ignore();
		cin >> records[i].master.sername;
		cin.ignore();
		cin >> records[i].master.patronymic;
		system("cls");

		cin.ignore();
		cin.clear();
		cout << "Введите дату (ДД/ММ/ГГ):" << endl;
		do {
			records[i].data.day = correct_value();
			cin.ignore();
			records[i].data.month = correct_value();
			cin.ignore();
			records[i].data.year = correct_value();
		} while (!isValidDate(records[i].data.day, records[i].data.month, records[i].data.year));
		system("cls");

		cin.ignore();
		cin.clear();
		cout << "Введите время:" << endl;
		do {
			records[i].time.hours = correct_value();
			cin.ignore();
			records[i].time.minutes = correct_value();
		} while (!isValidTime(records[i].time.hours, records[i].time.minutes));
		system("cls");

		cin.ignore();
		cin.clear();
		cout << "Введите ФИО клиента:" << endl;
		cin >> records[i].client.name;
		cin.ignore();
		cin >> records[i].client.sername;
		cin.ignore();
		cin >> records[i].client.patronymic;
		system("cls");

		cin.ignore();
		cin.clear();
		cout << "Введите номер клиента:" << endl;
		cin >> records[i].clientsNumber;
		system("cls");
	}
	cout << "Данные успешно добавлены" << endl << endl;
}

void printTabl(Rec* records, int& size) {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	if (size == 0) {
		cout << "В таблице нет записей" << endl;
	}
	else {
		cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
		cout << "|" << left << setw(5) << "ID" << "|" << left << setw(22) << "Услуга" << "|" << left << setw(15) << "Цена" << "|" << left << setw(35) << "ФИО мастера" << "|" << left << setw(15) << "ДД/ММ/ГГ" << "|" << left << setw(15) << "Час/мин." << "|" << left << setw(35) << "ФИО клиента" << "|" << left << setw(22) << "Номер телефона клиента" << "|" << endl;
		cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
		for (int i = 0; i < size; i++) {
			cout << "|" << left << setw(5) << i + 1 << "|"
				<< left << setw(22) << records[i].service << "|"
				<< left << setw(15) << records[i].price << "|"
				<< left << setw(35) << records[i].master.name + " " + records[i].master.sername + " " + records[i].master.patronymic << "|"
				<< left << setw(2) << records[i].data.day << "/"
				<< setw(2) << records[i].data.month << "/"
				<< setw(9) << records[i].data.year << "|"
				<< left  << setw(2) << records[i].time.hours << ":"
				<< setw(12) << records[i].time.minutes << "|"
				<< left << setw(35) << records[i].client.name + " " + records[i].client.sername + " " + records[i].client.patronymic << "|"
				<< left << setw(22) << records[i].clientsNumber << "|"
				<< endl;
			cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
		}
	}
}

void dobavlenie(Rec* (&records), int& size) {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	size++;
	Rec* buff = new Rec[size];
	for (int i = 0; i < size - 1; i++)
	{ 
		buff[i] = records[i];
	}
	records = new Rec[size];
	for (int i = 0; i < size - 1; i++)
	{
		records[i] = buff[i];
	}
	cin.ignore();
		cout << "Введите услугу для " << size << " записи:" << endl;
		cin >> records[size-1].service;
		system("cls");

		cin.ignore();
		cin.clear();
		cout << "Введите цену:" << endl;
		records[size-1].price = correct_value();
		system("cls");

		cin.ignore();
		cin.clear();
		cout << "Введите ФИО мастера:" << endl;
		cin >> records[size - 1].master.name;
		cin.ignore();
		cin >> records[size - 1].master.sername;
		cin.ignore();
		cin >> records[size - 1].master.patronymic;
		system("cls");

		cin.ignore();
		cin.clear();
		cout << "Введите дату (ДД/ММ/ГГ):" << endl;
		do {
			records[size - 1].data.day = correct_value();
			cin.ignore();
			records[size - 1].data.month = correct_value();
			cin.ignore();
			records[size - 1].data.year = correct_value();
		} while (!isValidDate(records[size - 1].data.day, records[size - 1].data.month, records[size - 1].data.year));
		system("cls");

		cin.ignore();
		cin.clear();
		cout << "Введите время:" << endl;
		do {
			records[size - 1].time.hours = correct_value();
			cin.ignore();
			records[size - 1].time.minutes = correct_value();
		} while (!isValidTime(records[size - 1].time.hours, records[size - 1].time.minutes));
		system("cls");

		cin.ignore();
		cin.clear();
		cout << "Введите ФИО клиента:" << endl;
		cin >> records[size-1].client.name;
		cin.ignore();
		cin >> records[size - 1].client.sername;
		cin.ignore();
		cin >> records[size - 1].client.patronymic;
		system("cls");

		cin.ignore();
		cin.clear();
		cout << "Введите номер клиента:" << endl;
		cin >> records[size-1].clientsNumber;
		system("cls");

		cout << "Запись успешно добавлена" << endl << endl;
	
}

void izmenenie(Rec* records, int& size) {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	bool flag = true;
	int number_records{};
	if (size == 0) {
		system("cls");
		cout << "В таблице нет записей" << endl << endl;
	}
	else {
		printTabl(records, size);
		do {
			flag = true;
			cout << "Введите номер записи, параметр, которой хотите изменить:" << endl;
			number_records = correct_value();
			if (number_records > 0 && number_records <= size)
				flag = false;
			else {
				cout << "Вы ввели некорректное значение,попробуйте снова:" << endl;
			}
		} while (flag);
		cout << endl;
		cout << "Параметры изменения:" << endl;
		cout << "1. Изменить мастера" << endl;
		cout << "2. Изменить дату" << endl;
		cout << "3. Изменить время" << endl;
		int number_parametr{};
		do {
			flag = true;
			cout << "Что вы хотите изменить:" << endl;
			number_parametr = correct_value();
			if (1 <= number_parametr && number_parametr <= 3)
				flag = false;
			else {
				cout << "Вы ввели некорректное значение,попробуйте снова:" << endl;
			}
		} while (flag);

		switch (number_parametr) {
		case 1:
			cout << "Введите ФИО мастера :" << endl;
			cin >> records[number_records - 1].master.name;
			cin.ignore();
			cin >> records[number_records - 1].master.sername;
			cin.ignore();
			cin >> records[number_records - 1].master.patronymic;
			break;
		case 2:

			cout << "Введите дату (ДД/ММ/ГГ):" << endl;
			do {
				records[number_records - 1].data.day = correct_value();
				cin.ignore();
				records[number_records - 1].data.month = correct_value();
				cin.ignore();
				records[number_records - 1].data.year = correct_value();
			} while (!isValidDate(records[number_records - 1].data.day, records[number_records - 1].data.month, records[number_records - 1].data.year));
			break;
		case 3:

			cout << "Введите время (ЧЧ:ММ):" << endl;
			do {
				records[number_records - 1].time.hours = correct_value();
				cin.ignore();
				records[number_records - 1].time.minutes = correct_value();
			} while (!isValidTime(records[number_records - 1].time.hours, records[number_records - 1].time.minutes));
			break;
		}
		system("cls");
		cout << "Запись успешно изменена" << endl << endl;
	}
}

void udalenie(Rec* records, int& size) {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	printTabl(records, size);
	int records_udalenie{};
	if (size == 0) {
		system("cls");
		cout << "В таблице нет записей" << endl << endl;
	}
	else {
		cout << "Введите номер записи, которую хотите удалить:" << endl;;
		do {
			records_udalenie = correct_value();
			if (records_udalenie > 0 && records_udalenie <= size) {
				system("cls");
				break;
			}
			else {
				cout << "Вы ввели некорректное значение попробуйте снова:" << endl;;
			}
		} while (records_udalenie);
		system("cls");
		for (int i = records_udalenie - 1; i < size - 1; i++) {
			records[i] = records[i + 1];
		}
		size--;
		system("cls");
		cout << "Запись успешно удалена" << endl << endl;
	}
}

void sort1(Rec* records, int size) {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	int sort;
	bool flag;
	cout << "Сортировка:" << endl;
	cout << "1 - По порядку" << endl;
	cout << "2 - В обратном порядке" << endl << endl;
	do {
		flag = true;
		cout << "Выберите вид сортировки:" << endl;;
		sort = correct_value();
		if (1 <= sort && sort <= 2)
			flag = false;
		else {
			cout << "Вы ввели некоректное значение,попробуйте снова:" << endl;
		}
	} while (flag);
	switch (sort) {
	case 1:
		for (int i = 0; i < size; i++) {
			for (int j = i + 1; j < size; j++) {
				if (records[i].price > records[j].price) {
					records2 = records[i];
					records[i] = records[j];
					records[j] = records2;
				}
			}
		}
		system("cls");
		cout << "Данные отсортированы по цене" << endl << endl;
		break;
	case 2:
		for (int i = 0; i < size; i++) {
			for (int j = i + 1; j < size; j++) {
				if (records[i].price < records[j].price) {
					records2 = records[i];
					records[i] = records[j];
					records[j] = records2;
				}
			}
		}
		system("cls");
		cout << "Данные отсортированы по цене" << endl << endl;
		break;
	}
}

void sort2(Rec* records, int size) {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	int sort;
	bool flag;
	cout << "Сортировка:" << endl;
	cout << "1 - По порядку" << endl;
	cout << "2 - В обратном порядке" << endl << endl;
	do {
		flag = true;
		cout << "Выберите вид сортировки:" << endl;;
		sort = correct_value();
		if (1 <= sort && sort <= 2)
			flag = false;
		else {
			cout << "Вы ввели некоректное значение,попробуйте снова:" << endl;
		}
	} while (flag);
	switch (sort) {
	case 1:
		for (int i = 0; i < size; i++) {
			for (int j = i + 1; j < size; j++) {
				if (records[i].data.year > records[j].data.year ||
					(records[i].data.year == records[j].data.year &&
						(records[i].data.month > records[j].data.month ||
							(records[i].data.month == records[j].data.month &&
								records[i].data.day > records[j].data.day))))
				{
					records2 = records[i];
					records[i] = records[j];
					records[j] = records2;
				}
			}
		}
		system("cls");
		cout << "Данные отсортированы по дате с учетом дня, месяца и года" << endl << endl;
		break;
	case 2:
		for (int i = 0; i < size; i++) {
			for (int j = i + 1; j < size; j++) {
				if (records[i].data.year < records[j].data.year ||
					(records[i].data.year == records[j].data.year &&
						(records[i].data.month < records[j].data.month ||
							(records[i].data.month == records[j].data.month &&
								records[i].data.day < records[j].data.day))))
				{
					records2 = records[i];
					records[i] = records[j];
					records[j] = records2;
				}
			}
		}
		system("cls");
		cout << "Данные отсортированы по дате" << endl << endl;
		break;
	}
}

void sort3(Rec* records, int size) {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	int sort;
	bool flag;
	cout << "Сортировка:" << endl;
	cout << "1 - По порядку" << endl;
	cout << "2 - В обратном порядке" << endl << endl;
	do {
		flag = true;
		cout << "Выберите вид сортировки:" << endl;;
		sort = correct_value();
		if (1 <= sort && sort <= 2)
			flag = false;
		else {
			cout << "Вы ввели некоректное значение,попробуйте снова:" << endl;
		}
	} while (flag);
	switch (sort) {
	case 1:
		for (int i = 0; i < size; i++) {
			for (int j = i + 1; j < size; j++) {
				if (records[i].time.hours > records[j].time.hours ||
					(records[i].time.hours == records[j].time.hours && records[i].time.minutes > records[j].time.minutes)) {
					Rec temp = records[i];
					records[i] = records[j];
					records[j] = temp;
				}
			}
		}
		cout << "Данные отсортированы по времени" << endl << endl;
		break;
	case 2:
		for (int i = 0; i < size; i++) {
			for (int j = i + 1; j < size; j++) {
				if (records[i].time.hours < records[j].time.hours ||
					(records[i].time.hours == records[j].time.hours && records[i].time.minutes < records[j].time.minutes)) {
					Rec temp = records[i];
					records[i] = records[j];
					records[j] = temp;
				}
			}
		}
		system("cls");
		cout << "Данные отсортированы по времени" << endl << endl;
		break;
	}
}

void sortirovka(Rec* records, int size) {
	int sort;
	bool flag;
	if (size == 0) {
		system("cls");
		cout << "В таблице нет записей" << endl << endl;
	}
	else {
		cout << "Сортировка:" << endl;
		cout << "1 - По цене" << endl;
		cout << "2 - По дате" << endl;
		cout << "3 - По времени" << endl;
		do {
			flag = true;
			cout << "Выберите вид сортировки:" << endl;;
			sort = correct_value();
			if (1 <= sort && sort <= 3)
				flag = false;
			else {
				cout << "Вы ввели некоректное значение,попробуйте снова:" << endl;
			}
		} while (flag);
		switch (sort) {
		case 1:
			sort1(records, size);
			break;
		case 2:
			sort2(records, size);
			break;
		case 3:
			sort3(records, size);
			break;
		}
	}
}

void search(Rec* records, int size) {
	int choice = 0;
	bool flag;
	cout << "Поиск по какому параметру Вы хотите осуществить?" << endl;
	cout << "1 - по услуге" << endl;
	cout << "2 - по мастеру" << endl;
	cout << "3 - по дате" << endl;
	cout << "4 - по времени" << endl;
	cout << "5 - по клиенту" << endl;
	do {
		flag = true;
		cout << "Ваш выбор:" << endl;
		cin.clear();
		choice = correct_value();
		if (1 <= choice && choice <= 5)
			flag = false;
		else {
			cout << "Вы ввели некоректное значение,попробуйте снова:" << endl << endl;
		}
	} while (flag);
	switch (choice) {
		case 1: {
			string serviceToSearch;
			system("cls");
			cout << "Введите название услуги для поиска: " << endl;
			cin >> serviceToSearch;

			bool found = false;
			if (!found) {
				system("cls");
				cout << "Ничего не найдено" << endl;
			}
			else {
				system("cls");
				cout << "Результаты поиска по услуге '" << serviceToSearch << "':" << endl;
				cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
				cout << "|" << left << setw(5) << "ID" << "|" << left << setw(22) << "Услуга" << "|" << left << setw(15) << "Цена" << "|" << left << setw(35) << "ФИО мастера" << "|" << left << setw(15) << "ДД/ММ/ГГ" << "|" << left << setw(15) << "Час/мин." << "|" << left << setw(35) << "ФИО клиента" << "|" << left << setw(22) << "Номер телефона клиента" << "|" << endl;
				cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
				for (int i = 0; i < size; i++) {
					if (records[i].service == serviceToSearch) {
						found = true;
						cout << "|" << left << setw(5) << i + 1 << "|"
							<< left << setw(22) << records[i].service << "|"
							<< left << setw(15) << records[i].price << "|"
							<< left << setw(35) << records[i].master.name << " " << records[i].master.sername << " " << records[i].master.patronymic << "|"
							<< left << setw(2) << records[i].data.day << "/"
							<< setw(2) << records[i].data.month << "/"
							<< setw(9) << records[i].data.year << "|"
							<< left << setw(2) << records[i].time.hours << ":"
							<< setw(12) << records[i].time.minutes << "|"
							<< left << setw(35) << records[i].client.name << " " << records[i].client.sername << " " << records[i].client.patronymic << "|"
							<< left << setw(22) << records[i].clientsNumber << "|"
							<< endl;
						cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
					}
				}
				sortirovka(records, size);
			}
			break;
		}
		case 2: {
			string masterNameToSearch;
			string masterSernameToSearch;
			string masterPatronymicToSearch;
			system("cls");
			cout << "Введите ФИО мастера для поиска: " << endl;
			cin >> masterNameToSearch;
			cin.ignore();
			cin >> masterSernameToSearch;
			cin.ignore();
			cin >> masterPatronymicToSearch;

			bool found = false;
			if (!found) {
				system("cls");
				cout << "Ничего не найдено" << endl;
			}
			else {
				system("cls");
				cout << "Результаты поиска по мастеру '" << masterNameToSearch << " " << masterSernameToSearch << " " << masterPatronymicToSearch << "':" << endl;
				cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
				cout << "|" << left << setw(5) << "ID" << "|" << left << setw(22) << "Услуга" << "|" << left << setw(15) << "Цена" << "|" << left << setw(35) << "ФИО мастера" << "|" << left << setw(15) << "ДД/ММ/ГГ" << "|" << left << setw(15) << "Час/мин." << "|" << left << setw(35) << "ФИО клиента" << "|" << left << setw(22) << "Номер телефона клиента" << "|" << endl;
				cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
				for (int i = 0; i < size; i++) {
					if (records[i].master.name == masterNameToSearch && records[i].master.sername == masterSernameToSearch && records[i].master.patronymic == masterPatronymicToSearch) {
						found = true;
						cout << "|" << left << setw(5) << i + 1 << "|"
							<< left << setw(22) << records[i].service << "|"
							<< left << setw(15) << records[i].price << "|"
							<< left << setw(35) << records[i].master.name << " " << records[i].master.sername << " " << records[i].master.patronymic << "|"
							<< left << setw(2) << records[i].data.day << "/"
							<< setw(2) << records[i].data.month << "/"
							<< setw(9) << records[i].data.year << "|"
							<< left << setw(2) << records[i].time.hours << ":"
							<< setw(12) << records[i].time.minutes << "|"
							<< left << setw(35) << records[i].client.name << " " << records[i].client.sername << " " << records[i].client.patronymic << "|"
							<< left << setw(22) << records[i].clientsNumber << "|"
							<< endl;
						cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
					}
				}
				sortirovka(records, size);
			}
			break;
		}
		case 3: {
			int dayToSearch, monthToSearch, yearToSearch;
			system("cls");
			cout << "Введите дату для поиска (ДД/ММ/ГГ): " << endl;
			do {
				dayToSearch = correct_value();
				cin.ignore();
				monthToSearch = correct_value();
				cin.ignore();
				yearToSearch = correct_value();
			} while (!isValidDate(dayToSearch, monthToSearch, yearToSearch));

			bool found = false;
			if (!found) {
				system("cls");
				cout << "Ничего не найдено" << endl;
			}
			else {
				system("cls");
				cout << "Результаты поиска по дате '" << dayToSearch << "/" << monthToSearch << "/" << yearToSearch << "':" << endl;
				cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
				cout << "|" << left << setw(5) << "ID" << "|" << left << setw(22) << "Услуга" << "|" << left << setw(15) << "Цена" << "|" << left << setw(35) << "ФИО мастера" << "|" << left << setw(15) << "ДД/ММ/ГГ" << "|" << left << setw(15) << "Час/мин." << "|" << left << setw(35) << "ФИО клиента" << "|" << left << setw(22) << "Номер телефона клиента" << "|" << endl;
				cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
				for (int i = 0; i < size; i++) {
					if (records[i].data.day == dayToSearch && records[i].data.month == monthToSearch && records[i].data.year == yearToSearch) {
						found = true;
						cout << "|" << left << setw(5) << i + 1 << "|"
							<< left << setw(22) << records[i].service << "|"
							<< left << setw(15) << records[i].price << "|"
							<< left << setw(35) << records[i].master.name << " " << records[i].master.sername << " " << records[i].master.patronymic << "|"
							<< left << setw(2) << records[i].data.day << "/"
							<< setw(2) << records[i].data.month << "/"
							<< setw(9) << records[i].data.year << "|"
							<< left << setw(2) << records[i].time.hours << ":"
							<< setw(12) << records[i].time.minutes << "|"
							<< left << setw(35) << records[i].client.name << " " << records[i].client.sername << " " << records[i].client.patronymic << "|"
							<< left << setw(22) << records[i].clientsNumber << "|"
							<< endl;
						cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;

					}
				}
				sortirovka(records, size);
			}
			break;
		}
		case 4: {
			int hoursToSearch, minutesToSearch;
			system("cls");
			cout << "Введите время для поиска (ЧЧ:ММ): " << endl;
			do {
				hoursToSearch = correct_value();
				cin.ignore();
				minutesToSearch = correct_value();
			} while (!isValidTime(hoursToSearch, minutesToSearch));

			bool found = false;
			if (!found) {
				system("cls");
				cout << "Ничего не найдено" << endl;
			}
			else {
				system("cls");
				cout << "Результаты поиска по времени '" << hoursToSearch << ":" << minutesToSearch << "':" << endl;
				cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
				cout << "|" << left << setw(5) << "ID" << "|" << left << setw(22) << "Услуга" << "|" << left << setw(15) << "Цена" << "|" << left << setw(35) << "ФИО мастера" << "|" << left << setw(15) << "ДД/ММ/ГГ" << "|" << left << setw(15) << "Час/мин." << "|" << left << setw(35) << "ФИО клиента" << "|" << left << setw(22) << "Номер телефона клиента" << "|" << endl;
				cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
				for (int i = 0; i < size; i++) {
					if (records[i].time.hours == hoursToSearch && records[i].time.minutes == minutesToSearch) {
						found = true;
						cout << "|" << left << setw(5) << i + 1 << "|"
							<< left << setw(22) << records[i].service << "|"
							<< left << setw(15) << records[i].price << "|"
							<< left << setw(35) << records[i].master.name << " " << records[i].master.sername << " " << records[i].master.patronymic << "|"
							<< left << setw(2) << records[i].data.day << "/"
							<< setw(2) << records[i].data.month << "/"
							<< setw(9) << records[i].data.year << "|"
							<< left << setw(2) << records[i].time.hours << ":"
							<< setw(12) << records[i].time.minutes << "|"
							<< left << setw(35) << records[i].client.name << " " << records[i].client.sername << " " << records[i].client.patronymic << "|"
							<< left << setw(22) << records[i].clientsNumber << "|"
							<< endl;
						cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
					}
				}

				sortirovka(records, size);
			}
			break;
		}
		case 5: {
			string clientsNameToSearch;
			string clientsSernameToSearch;
			string clientsPatronymicToSearch;
			system("cls");
			cout << "Введите ФИО клиента для поиска: " << endl;
			cin >> clientsNameToSearch;
			cin.ignore();
			cin >> clientsSernameToSearch;
			cin.ignore();
			cin >> clientsPatronymicToSearch;

			bool found = false;
			if (!found) {
				system("cls");
				cout << "Ничего не найдено" << endl;
			}
			else {
				system("cls");
				cout << "Результаты поиска по клиенту '" << clientsNameToSearch << " " << clientsSernameToSearch << " " << clientsPatronymicToSearch << "':" << endl;
				cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
				cout << "|" << left << setw(5) << "ID" << "|" << left << setw(22) << "Услуга" << "|" << left << setw(15) << "Цена" << "|" << left << setw(35) << "ФИО мастера" << "|" << left << setw(15) << "ДД/ММ/ГГ" << "|" << left << setw(15) << "Час/мин." << "|" << left << setw(35) << "ФИО клиента" << "|" << left << setw(22) << "Номер телефона клиента" << "|" << endl;
				cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
				for (int i = 0; i < size; i++) {
					if (records[i].client.name == clientsNameToSearch && records[i].client.sername == clientsNameToSearch && records[i].client.patronymic == clientsNameToSearch) {
						found = true;
						cout << "|" << left << setw(5) << i + 1 << "|"
							<< left << setw(22) << records[i].service << "|"
							<< left << setw(15) << records[i].price << "|"
							<< left << setw(35) << records[i].master.name << " " << records[i].master.sername << " " << records[i].master.patronymic << "|"
							<< left << setw(2) << records[i].data.day << "/"
							<< setw(2) << records[i].data.month << "/"
							<< setw(9) << records[i].data.year << "|"
							<< left << setw(2) << records[i].time.hours << ":"
							<< setw(12) << records[i].time.minutes << "|"
							<< left << setw(35) << records[i].client.name << " " << records[i].client.sername << " " << records[i].client.patronymic << "|"
							<< left << setw(22) << records[i].clientsNumber << "|"
							<< endl;
						cout << "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
					}
				}

				sortirovka(records, size);
			}
			break;
		}
	} while (choice != 0);
}

void in_txt_file(Rec* records, int size) {
	ofstream fout;
	fout.open("База данных.txt");
	if (!fout.is_open())
		cout << "Ошибка открытия файла" << endl << endl;
	else {
		system("cls");
		cout << "Данные записаны в текстовый файл" << endl << endl;
		fout << size << endl;
		for (int i = 0; i < size; i++) {
			fout << records[i].service << ' ' << records[i].price << ' '
				<< records[i].master.name << " " << records[i].master.sername << " " << records[i].master.patronymic << ' ' << records[i].data.day << "/" << records[i].data.month << "/" << records[i].data.year << ' '
				<< records[i].time.hours << ":" << records[i].time.minutes << ' ' << records[i].client.name << " " << records[i].client.sername << " " << records[i].client.patronymic << ' '
				<< records[i].clientsNumber << ' ' << endl;
		}
	}
	fout.close();
}

void from_txt_file(Rec* (&records), int& size) {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	bool flag;
	ifstream fin;
	fin.open("База данных.txt");
	if (!fin.is_open()) {
		cout << "Ошибка открытия файла" << endl << endl;
	}
	else {
		system("cls");
		cout << "Данные данные загружены в базу данных" << endl << endl;
		fin >> size;
		records = new Rec[size];
		for (int i = 0; i < size; i++) {
			fin >> records[i].service >> records[i].price
				>> records[i].master.name;
			fin.ignore();
			fin >> records[i].master.sername;
			fin.ignore();
			fin >> records[i].master.patronymic >> records[i].data.day;
			fin.ignore();
			fin >> records[i].data.month;
			fin.ignore();
			fin >> records[i].data.year
				>> records[i].time.hours;
			fin.ignore();
			fin >> records[i].time.minutes >> records[i].client.name;
			fin.ignore();
			fin >> records[i].client.sername;
			fin.ignore();
			fin >> records[i].client.patronymic >> records[i].clientsNumber;
		}
	}
	fin.close();
}

int main() {
	setlocale(LC_ALL, "Rus");
	int size2{};
	int size{};
	Rec* records= new Rec[size];
	Rec* array = new Rec[size2];
	int menu;
	bool flag;
			
	system("cls");
	do {
		cout << "---------------------------------------------------" << endl;
		cout << "Меню:" << endl;
		cout << "---------------------------------------------------" << endl;
		cout << "1 - Выйти из программы" << endl;
		cout << "2 - Вывести таблицу с клиентами" << endl;
		cout << "3 - Заполнить таблицу" << endl;
		cout << "4 - Добавить новую запись в таблицу" << endl;
		cout << "5 - Изменить данные в таблице" << endl;
		cout << "6 - Удалить запись из таблицы" << endl;
		cout << "7 - Поиск по пунктам" << endl;
		cout << "8 - Выгрузка базы данных в текстовый файл" << endl;
		cout << "9 - Загрузка базы данных из текстового файла" << endl;
		cout << "---------------------------------------------------" << endl << endl;
		do {
			flag = true;
			cout << "Что вы хотите сделать:" << endl;
			cin.clear();
			menu = correct_value();
			if (1 <= menu && menu <= 9)
				flag = false;
			else {
				cout << "Вы ввели некоректное значение,попробуйте снова:" << endl << endl;
			}
		} while (flag);

		switch (menu) {
		case 1:
			system("cls");
			cout << "Вы вышли из программы" << endl;
			exit(0);
			break;
		case 2:
			system("cls");
			printTabl(records, size);
			break;
		case 3:
			system("cls");
			zapolnenie(records, size);
			break;
		case 4:
			system("cls");
			dobavlenie(records, size);
			break;
		case 5:
			system("cls");
			izmenenie(records, size);
			break;
		case 6:
			system("cls");
			udalenie(records, size);
			break;
		case 7:
			system("cls");
			search(records, size);
			break;
		case 8:
			system("cls");
			in_txt_file(records, size);
			break;
		case 9:
			system("cls");
			from_txt_file(records, size);
			break;
		}
	} while (menu != 0);
}
